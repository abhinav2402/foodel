angular.module("app",["ngRoute","ui.router"]),angular.module("app").controller("errorCtrl",["$scope","$rootScope",function(e,o){e.hello="this is from the controller hello",console.log(e.hello)}]),angular.module("app").controller("homeCtrl",["$scope","$http",function(e,o){e.model={},e.markonGoogleMap=function(){"geolocation"in navigator&&navigator.geolocation.getCurrentPosition(function(o){console.log(o.coords.latitude,o.coords.longitude);var t=o.coords.latitude,l=o.coords.longitude,n=new google.maps.Geocoder,r=new google.maps.LatLng(t,l);n.geocode({latLng:r},function(o,t){if(t==google.maps.GeocoderStatus.OK){if(o[0])for(var l=o[0].address_components,n=0;n<l.length;n++){if("sublocality_level_3"==l[n].types[0])var r=l[n].long_name;if("sublocality_level_2"==l[n].types[0])var a=l[n].long_name;if("sublocality_level_1"==l[n].types[0])var i=l[n].long_name;if("locality"==l[n].types[0])var s=l[n].long_name;if("administrative_area_level_1"==l[n].types[0])var c=l[n].long_name;if("country"==l[n].types[0]){var u=l[n].long_name;console.log(u)}if("postal_code"==l[n].types[0]){var m=l[n].long_name;console.log(m)}}e.model.area=r+", "+a+", "+i+", "+s+", "+c+", "+u,e.$digest(),console.log(e.model.area),console.log(l)}})});var o=document.getElementById("place"),t=new google.maps.places.Autocomplete(o);google.maps.event.addListener(t,"place_changed",function(){var e=t.getPlace();return e.geometry?void console.log(e):void window.alert("Autocomplete's returned place contains no geometry")})},e.model.qitem1=0,e.model.qitem2=0,e.addItem=function(o){if(1==o){if(8==e.model.qitem1)return void alert("Maximum limit reached");e.model.qitem1++}else if(2==o){if(8==e.model.qitem2)return void alert("Maximum limit reached");e.model.qitem2++}},e.removeItem=function(o){if(1==o){if(0==e.model.qitem1)return void alert("You have not added this item to cart");e.model.qitem1--}else if(2==o){if(0==e.model.qitem2)return void alert("You have not added this item to cart");e.model.qitem2--}},e.markonGoogleMap()}]),angular.module("app").controller("loginCtrl",["$scope","auth","$location","$timeout",function(e,o,t,l){e.authFail=!1,e.login=function(t,n){o.login(t,n).then(function(e){o.storeToken(e.data,function(){o.getUser().then(function(e){o.postLoginOps(e.data,function(){o.postLoginRouteHandler()})})})})["catch"](function(o){console.error("Gists error",o.status,o.data),401==o.status&&(e.authFail=!0,l(function(){e.authFail=!1},3e3))})["finally"](function(){console.log("finally finished gists")})}}]),angular.module("app").controller("masterCtrl",["$scope","$rootScope","$route",function(e,o,t){console.log("masterCtrl"),localStorage.getItem("logged_user")&&(o.currentUser=localStorage.getItem("logged_user")),e.$on("login",function(t,l){console.log("Logged In"),e.currentUser=l,o.currentUser=l,localStorage.setItem("logged_user",o.currentUser.username)})}]),angular.module("app").controller("navCtrl",["$scope","auth","$location",function(e,o,t){e.logout=function(){o.logout()}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(e,o){o.fetch().success(function(o){e.posts=o}),e.addPost=function(){e.postBody&&o.create({body:e.postBody}).success(function(o){e.postBody=null})},e.$on("ws:new_post",function(o,t){e.$apply(function(){e.posts.unshift(t)})})}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(o){return e.post("/api/posts",o)}}]),angular.module("app").controller("registerCtrl",["$scope","auth","$location",function(e,o,t){e.register=function(l,n,r){o.register(l,n,r).then(function(o){e.$emit("login",o.data),t.path("/home")})["catch"](function(e){console.log(e)})}}]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,o,t){o.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html",controller:"navCtrl"},content:{templateUrl:"users/home.html",controller:"homeCtrl"}}}).state("app.login",{url:"login",views:{header:{templateUrl:"/nav.html",controller:"navCtrl"},content:{templateUrl:"/login.html",controller:"loginCtrl"}}}).state("app.register",{url:"register",views:{"content@":{templateUrl:"register.html",controller:"registerCtrl"}}}).state("app.home",{url:"home",views:{"content@":{templateUrl:"users/home.html",controller:"homeCtrl"}}}).state("app.home.vehicles",{url:"/vehicles/new",views:{"content@":{templateUrl:"vehicles/newVehicle.html",controller:"VehiclesNewInfoCtrl"}}}).state("app.home.details",{url:"/vehicles/:id",views:{"content@":{templateUrl:"vehicles/editVehicle.html",controller:"VehiclesEditInfoCtrl"}}}).state("app.home.map",{url:"/vehicles/map/:id",views:{"content@":{templateUrl:"vehicles/mapVehicle.html",controller:"VehiclesEditMapCtrl"}}}),t.html5Mode(!0)}]),angular.module("app").service("auth",["$http","$window","$location","$rootScope",function(e,o,t,l){function n(){return e.get("api/users")}function r(o,t){return e.post("api/sessions",{username:o,password:t})}function a(){localStorage.removeItem("user_token"),localStorage.removeItem("logged_user"),delete e.defaults.headers.common["x-auth"],l.isLogged=!1,l.currentUser=null,t.path("/login")}function i(t,l){o.sessionStorage.user_token=t,localStorage.setItem("user_token",t),e.defaults.headers.common["x-auth"]=o.sessionStorage.user_token,l&&"function"==typeof l&&l()}function s(){}function c(e,o){l.currentUser=e.name,localStorage.setItem("logged_user",l.currentUser),l.isLogged=!0,o&&"function"==typeof o&&o()}function u(){l.intendedRoute?t.path(l.intendedRoute):t.path("/home")}return{getUser:n,login:r,logout:a,storeToken:i,isLogged:s,postLoginOps:c,postLoginRouteHandler:u}}]);
//# sourceMappingURL=data:application/json;base64,
