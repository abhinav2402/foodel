angular.module("app",["ngRoute","ui.router"]),angular.module("app").controller("errorCtrl",["$scope","$rootScope",function(e,o){e.hello="this is from the controller hello",console.log(e.hello)}]),angular.module("app").controller("homeCtrl",["$scope","$http",function(e,o){e.model={},e.markonGoogleMap=function(){"geolocation"in navigator&&navigator.geolocation.getCurrentPosition(function(o){console.log(o.coords.latitude,o.coords.longitude);var t=o.coords.latitude,n=o.coords.longitude,l=new google.maps.Geocoder,r=new google.maps.LatLng(t,n);l.geocode({latLng:r},function(o,t){if(t==google.maps.GeocoderStatus.OK){if(o[0])for(var n=o[0].address_components,l=0;l<n.length;l++){if("sublocality_level_3"==n[l].types[0])var r=n[l].long_name;if("sublocality_level_2"==n[l].types[0])var a=n[l].long_name;if("sublocality_level_1"==n[l].types[0])var s=n[l].long_name;if("locality"==n[l].types[0])var c=n[l].long_name;if("administrative_area_level_1"==n[l].types[0])var i=n[l].long_name;if("country"==n[l].types[0]){var u=n[l].long_name;console.log(u)}if("postal_code"==n[l].types[0]){var g=n[l].long_name;console.log(g)}}e.model.area=r+", "+a+", "+s+", "+c+", "+i+", "+u,e.$digest(),console.log(e.model.area),console.log(n)}})});var o=document.getElementById("place"),t=new google.maps.places.Autocomplete(o);google.maps.event.addListener(t,"place_changed",function(){var e=t.getPlace();return e.geometry?void console.log(e):void window.alert("Autocomplete's returned place contains no geometry")})},e.markonGoogleMap()}]),angular.module("app").controller("loginCtrl",["$scope","auth","$location","$timeout",function(e,o,t,n){e.authFail=!1,e.login=function(t,l){o.login(t,l).then(function(e){o.storeToken(e.data,function(){o.getUser().then(function(e){o.postLoginOps(e.data,function(){o.postLoginRouteHandler()})})})})["catch"](function(o){console.error("Gists error",o.status,o.data),401==o.status&&(e.authFail=!0,n(function(){e.authFail=!1},3e3))})["finally"](function(){console.log("finally finished gists")})}}]),angular.module("app").controller("masterCtrl",["$scope","$rootScope","$route",function(e,o,t){console.log("masterCtrl"),localStorage.getItem("logged_user")&&(o.currentUser=localStorage.getItem("logged_user")),e.$on("login",function(t,n){console.log("Logged In"),e.currentUser=n,o.currentUser=n,localStorage.setItem("logged_user",o.currentUser.username)})}]),angular.module("app").controller("navCtrl",["$scope","auth","$location",function(e,o,t){e.logout=function(){o.logout()}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(e,o){o.fetch().success(function(o){e.posts=o}),e.addPost=function(){e.postBody&&o.create({body:e.postBody}).success(function(o){e.postBody=null})},e.$on("ws:new_post",function(o,t){e.$apply(function(){e.posts.unshift(t)})})}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(o){return e.post("/api/posts",o)}}]),angular.module("app").controller("registerCtrl",["$scope","auth","$location",function(e,o,t){e.register=function(n,l,r){o.register(n,l,r).then(function(o){e.$emit("login",o.data),t.path("/home")})["catch"](function(e){console.log(e)})}}]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,o,t){o.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html",controller:"navCtrl"},content:{templateUrl:"users/home.html",controller:"homeCtrl"}}}).state("app.login",{url:"login",views:{header:{templateUrl:"/nav.html",controller:"navCtrl"},content:{templateUrl:"/login.html",controller:"loginCtrl"}}}).state("app.register",{url:"register",views:{"content@":{templateUrl:"register.html",controller:"registerCtrl"}}}).state("app.home",{url:"home",views:{"content@":{templateUrl:"users/home.html",controller:"homeCtrl"}}}).state("app.home.vehicles",{url:"/vehicles/new",views:{"content@":{templateUrl:"vehicles/newVehicle.html",controller:"VehiclesNewInfoCtrl"}}}).state("app.home.details",{url:"/vehicles/:id",views:{"content@":{templateUrl:"vehicles/editVehicle.html",controller:"VehiclesEditInfoCtrl"}}}).state("app.home.map",{url:"/vehicles/map/:id",views:{"content@":{templateUrl:"vehicles/mapVehicle.html",controller:"VehiclesEditMapCtrl"}}}),t.html5Mode(!0)}]),angular.module("app").service("auth",["$http","$window","$location","$rootScope",function(e,o,t,n){function l(){return e.get("api/users")}function r(o,t){return e.post("api/sessions",{username:o,password:t})}function a(){localStorage.removeItem("user_token"),localStorage.removeItem("logged_user"),delete e.defaults.headers.common["x-auth"],n.isLogged=!1,n.currentUser=null,t.path("/login")}function s(t,n){o.sessionStorage.user_token=t,localStorage.setItem("user_token",t),e.defaults.headers.common["x-auth"]=o.sessionStorage.user_token,n&&"function"==typeof n&&n()}function c(){}function i(e,o){n.currentUser=e.name,localStorage.setItem("logged_user",n.currentUser),n.isLogged=!0,o&&"function"==typeof o&&o()}function u(){n.intendedRoute?t.path(n.intendedRoute):t.path("/home")}return{getUser:l,login:r,logout:a,storeToken:s,isLogged:c,postLoginOps:i,postLoginRouteHandler:u}}]);
//# sourceMappingURL=data:application/json;base64,
